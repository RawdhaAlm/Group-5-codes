from datetime import datetime

# Admin class implementation
class Admin:
    def __init__(self, admin_id: int, name: str, email: str, access_level: str, password: str):
        self.__admin_id = admin_id
        self.__name = name
        self.__email = email
        self.__access_level = access_level  # e.g., "basic", "super-admin"
        self.__password = password

    # Getters and setters
    def set_admin_id(self, admin_id: int):
        if not isinstance(admin_id, int):
            raise ValueError("Admin ID must be an integer.")
        self.__admin_id = admin_id

    def get_admin_id(self):
        return self.__admin_id

    def set_name(self, name: str):
        if not name:
            raise ValueError("Name cannot be empty.")
        self.__name = name

    def get_name(self):
        return self.__name

    def set_email(self, email: str):
        if "@" not in email:
            raise ValueError("Invalid email format.")
        self.__email = email

    def get_email(self):
        return self.__email

    def set_access_level(self, access_level: str):
        valid_levels = ["basic", "super-admin"]
        if access_level not in valid_levels:
            raise ValueError("Access level must be 'basic' or 'super-admin'.")
        self.__access_level = access_level

    def get_access_level(self):
        return self.__access_level

    def set_password(self, password: str):
        if len(password) < 6:
            raise ValueError("Password must be at least 6 characters long.")
        self.__password = password

    def get_password(self):
        return self.__password

    # Additional functionalities
    def view_sales_report(self):
        # This is a mockup method to simulate viewing a sales report
        print("Viewing sales report: Total revenue $10,000. Number of tickets sold: 500.")

    def modify_discount_rules(self, discount, new_percentage):
        # Interacts with Discount class to update discount percentage
        try:
            discount.set_percentage(new_percentage)
            print(f"Discount ID {discount.get_discount_id()} updated to {new_percentage * 100}%")
        except Exception as e:
            print(f"Error modifying discount: {e}")

    def authenticate(self, entered_password: str):
        if entered_password != self.__password:
            raise PermissionError("Incorrect password. Access denied.")
        print("Authentication successful.")

# Discount class for interaction
class Discount:
    def __init__(self, discount_id: int, description: str, percentage: float, expiry_date: datetime):
        self.__discount_id = discount_id
        self.__description = description
        self.__percentage = percentage
        self.__expiry_date = expiry_date

    def set_percentage(self, percentage: float):
        if not (0 <= percentage <= 1):
            raise ValueError("Percentage must be between 0 and 1.")
        self.__percentage = percentage

    def get_percentage(self):
        return self.__percentage

    def get_discount_id(self):
        return self.__discount_id

# Example usage in main code
if __name__ == "__main__":
    # Create an Admin instance
    admin = Admin(1, "Alice", "alice@example.com", "super-admin", "securepassword")

    # Authenticate admin
    try:
        admin.authenticate("securepassword")
    except PermissionError as e:
        print(e)

    # View a sales report
    admin.view_sales_report()

    # Create a Discount instance
    discount = Discount(101, "20% off for group tickets", 0.2, datetime(2024, 12, 31))

    # Modify the discount rules
    try:
        admin.modify_discount_rules(discount, 0.25)
    except ValueError as e:
        print(f"Failed to update discount: {e}")



test cases:

from datetime import datetime

# Initialize an admin
admin = Admin(1, "Alice", "alice@example.com", "super-admin", "securepassword")

# Authenticate the admin
try:
    admin.authenticate("securepassword")
except PermissionError as e:
    print(e)

# Create a discount
discount = Discount(101, "20% off for group tickets", 0.2, datetime(2024, 12, 31))

# Modify the discount percentage
try:
    admin.modify_discount_rules(discount, 0.3)  # Update to 30%
except ValueError as e:
    print(f"Failed to update discount: {e}")


