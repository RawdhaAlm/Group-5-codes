from datetime import date, timedelta


class DiscountError(Exception):
    """Custom exception class for Discount-related errors."""
    pass


class Discount:
    def __init__(self, discount_id, description, percentage, valid_tickets, expiry_date):
        self.__discount_id = discount_id
        self.__description = description
        self.__percentage = percentage
        self.__valid_tickets = valid_tickets
        self.__expiry_date = expiry_date

    # Getters and setters
    def get_discount_id(self):
        return self.__discount_id

    def set_discount_id(self, discount_id):
        self.__discount_id = discount_id

    def get_description(self):
        return self.__description

    def set_description(self, description):
        self.__description = description

    def get_percentage(self):
        return self.__percentage

    def set_percentage(self, percentage):
        if not 0 <= percentage <= 1:
            raise DiscountError("Discount percentage must be between 0 and 1.")
        self.__percentage = percentage

    def get_valid_tickets(self):
        return self.__valid_tickets

    def set_valid_tickets(self, valid_tickets):
        self.__valid_tickets = valid_tickets

    def get_expiry_date(self):
        return self.__expiry_date

    def set_expiry_date(self, expiry_date):
        if expiry_date < date.today():
            raise DiscountError("Expiry date cannot be in the past.")
        self.__expiry_date = expiry_date

    # Additional functionalities
    def is_valid(self, ticket_type):
        """Check if the discount is valid for a specific ticket type."""
        if ticket_type not in self.__valid_tickets:
            return False
        if date.today() > self.__expiry_date:
            return False
        return True

    def apply_discount(self, ticket_price):
        """Apply the discount to a ticket price if valid."""
        if not 0 <= self.__percentage <= 1:
            raise DiscountError("Invalid discount percentage.")
        return ticket_price * (1 - self.__percentage)

    def get_discount_details(self):
        """Return a formatted string with discount details."""
        return f"Discount ID: {self.__discount_id}, Description: {self.__description}, " \
               f"Percentage: {self.__percentage * 100}%, Expiry Date: {self.__expiry_date}"


# Specialized Subclasses
class GroupDiscount(Discount):
    def __init__(self, discount_id, description, percentage, valid_tickets, expiry_date, group_size_required):
        super().__init__(discount_id, description, percentage, valid_tickets, expiry_date)
        self.__group_size_required = group_size_required

    def get_group_size_required(self):
        return self.__group_size_required

    def set_group_size_required(self, group_size_required):
        self.__group_size_required = group_size_required

    def is_valid(self, ticket_type, group_size):
        """Override is_valid to check group size."""
        if not super().is_valid(ticket_type):
            return False
        if group_size < self.__group_size_required:
            return False
        return True

    def get_discount_details(self):
        details = super().get_discount_details()
        return details + f", Group Size Required: {self.__group_size_required}"


class RenewalDiscount(Discount):
    def __init__(self, discount_id, description, percentage, valid_tickets, expiry_date):
        super().__init__(discount_id, description, percentage, valid_tickets, expiry_date)

    def get_discount_details(self):
        details = super().get_discount_details()
        return details + ", Applies to: Membership renewals only."


# Example Usage in Main Code
if __name__ == "__main__":
    try:
        # Create a general discount
        general_discount = Discount(
            discount_id=1,
            description="10% off on Single-Day Pass",
            percentage=0.1,
            valid_tickets=["Single-Day Pass"],
            expiry_date=date.today() + timedelta(days=5)
        )

        # Create a group discount
        group_discount = GroupDiscount(
            discount_id=2,
            description="20% off for groups of 20 or more",
            percentage=0.2,
            valid_tickets=["Group Ticket"],
            expiry_date=date.today() + timedelta(days=7),
            group_size_required=20
        )

        # Create a renewal discount
        renewal_discount = RenewalDiscount(
            discount_id=3,
            description="15% off on Annual Membership renewals",
            percentage=0.15,
            valid_tickets=["Annual Membership"],
            expiry_date=date.today() + timedelta(days=30)
        )

        # Test general discount
        ticket_price = 275
        ticket_type = "Single-Day Pass"
        if general_discount.is_valid(ticket_type):
            discounted_price = general_discount.apply_discount(ticket_price)
            print(f"General Discount Applied: Original Price: {ticket_price}, Discounted Price: {discounted_price}")
        else:
            print("General Discount is not valid.")

        # Test group discount
        ticket_price = 220
        ticket_type = "Group Ticket"
        group_size = 25
        if group_discount.is_valid(ticket_type, group_size):
            discounted_price = group_discount.apply_discount(ticket_price)
            print(f"Group Discount Applied: Original Price: {ticket_price}, Discounted Price: {discounted_price}")
        else:
            print("Group Discount is not valid.")

        # Test renewal discount
        ticket_price = 1840
        ticket_type = "Annual Membership"
        if renewal_discount.is_valid(ticket_type):
            discounted_price = renewal_discount.apply_discount(ticket_price)
            print(f"Renewal Discount Applied: Original Price: {ticket_price}, Discounted Price: {discounted_price}")
        else:
            print("Renewal Discount is not valid.")

    except DiscountError as e:
        print(f"Error: {e}")



test cases:

from datetime import date, timedelta

try:
    # Create a discount with an expired date
    expired_discount = Discount(
        discount_id=1,
        description="10% off on Single-Day Pass",
        percentage=0.1,
        valid_tickets=["Single-Day Pass"],
        expiry_date=date.today() - timedelta(days=1)  # Expired yesterday
    )

    # Test the validity of the discount
    ticket_type = "Single-Day Pass"
    if expired_discount.is_valid(ticket_type):
        print("Test Case 1 Failed: Expired discount is considered valid.")
    else:
        print("Test Case 1 Passed: Expired discount is correctly identified as invalid.")

except DiscountError as e:
    print(f"Error in Test Case 1: {e}")


from datetime import date, timedelta

try:
    # Create a group discount
    group_discount = GroupDiscount(
        discount_id=2,
        description="20% off for groups of 20 or more",
        percentage=0.2,
        valid_tickets=["Group Ticket"],
        expiry_date=date.today() + timedelta(days=10),  # Valid in the future
        group_size_required=20
    )

    # Test the discount with insufficient group size
    ticket_type = "Group Ticket"
    group_size = 15  # Below the required size
    if group_discount.is_valid(ticket_type, group_size):
        print("Test Case 2 Failed: Group discount applied for insufficient group size.")
    else:
        print("Test Case 2 Passed: Group discount correctly rejected for insufficient group size.")

except DiscountError as e:
    print(f"Error in Test Case 2: {e}")



