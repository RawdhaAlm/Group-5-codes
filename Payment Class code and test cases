from datetime import datetime

class Booking:
    # Simplified Booking class to establish a relationship
    def __init__(self, booking_id, customer_name, visit_date):
        self.booking_id = booking_id
        self.customer_name = customer_name
        self.visit_date = visit_date
        self.payment_status = False

    def update_payment_status(self, status):
        self.payment_status = status

    def get_booking_details(self):
        return f"Booking ID: {self.booking_id}, Customer: {self.customer_name}, Visit Date: {self.visit_date}, Payment Status: {'Paid' if self.payment_status else 'Unpaid'}"


class Payment:
    def __init__(self, payment_id, booking, amount, payment_method, payment_date=None):
        self.payment_id = payment_id
        self.booking = booking  # Relationship with Booking
        self.amount = amount
        self.payment_method = payment_method
        self.payment_date = payment_date if payment_date else datetime.now()

    # Getters and Setters
    def set_payment_id(self, payment_id):
        self.payment_id = payment_id

    def get_payment_id(self):
        return self.payment_id

    def set_booking(self, booking):
        self.booking = booking

    def get_booking(self):
        return self.booking

    def set_amount(self, amount):
        if amount <= 0:
            raise ValueError("Payment amount must be greater than zero.")
        self.amount = amount

    def get_amount(self):
        return self.amount

    def set_payment_method(self, payment_method):
        self.payment_method = payment_method

    def get_payment_method(self):
        return self.payment_method

    def set_payment_date(self, payment_date):
        self.payment_date = payment_date

    def get_payment_date(self):
        return self.payment_date

    # Additional Functionalities
    def process_payment(self):
        if not isinstance(self.booking, Booking):
            raise TypeError("Invalid booking instance.")
        if self.amount <= 0:
            raise ValueError("Invalid payment amount.")
        if self.payment_method not in ["Credit Card", "Digital Wallet", "Bank Transfer"]:
            raise ValueError("Invalid payment method.")

        # Simulate payment processing
        print(f"Processing payment of {self.amount} using {self.payment_method} for Booking ID {self.booking.booking_id}...")
        self.booking.update_payment_status(True)
        print("Payment successful!")

    def get_payment_details(self):
        return (f"Payment ID: {self.payment_id}, Amount: {self.amount}, Method: {self.payment_method}, "
                f"Date: {self.payment_date}, Booking ID: {self.booking.booking_id}")


# Example Usage
if __name__ == "__main__":
    # Create a Booking instance
    booking = Booking(booking_id=101, customer_name="Rawdha", visit_date="2024-12-05")
    print(booking.get_booking_details())

    # Create a Payment instance
    payment = Payment(payment_id=201, booking=booking, amount=500.0, payment_method="Credit Card")
    print(payment.get_payment_details())

    # Process the payment
    try:
        payment.process_payment()
    except Exception as e:
        print(f"Error processing payment: {e}")

    # Verify updated booking status
    print(booking.get_booking_details())


test cases:

from datetime import datetime

# Create a Booking instance
booking = Booking(booking_id=102, customer_name="Aysha Alkaabi", visit_date="2024-12-10")

# Create a Payment instance with valid details
payment = Payment(payment_id=301, booking=booking, amount=750.0, payment_method="Credit Card")

# Test processing the payment
try:
    print(payment.get_payment_details())  # Display payment details before processing
    payment.process_payment()  # Process payment
    print(booking.get_booking_details())  # Verify booking payment status
except Exception as e:
    print(f"Error: {e}")


# Create a Booking instance
booking = Booking(booking_id=103, customer_name="Haya Alzaabi", visit_date="2024-12-15")

# Attempt to create a Payment instance with an invalid amount
try:
    payment = Payment(payment_id=302, booking=booking, amount=-100.0, payment_method="Digital Wallet")
    payment.process_payment()
except Exception as e:
    print(f"Error: {e}")

